--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: mir_pgdb; Type: DATABASE; Schema: -; Owner: postgres
--

CREATE DATABASE mir_pgdb WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'ru_RU.UTF-8' LC_CTYPE = 'ru_RU.UTF-8';


ALTER DATABASE mir_pgdb OWNER TO postgres;

\connect mir_pgdb

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: check_avto_trigger(); Type: FUNCTION; Schema: public; Owner: root
--

CREATE FUNCTION check_avto_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
     new.dt = now();
     if (new.avto = '*') then
       update tlf_note set avto = '' where  ab_num = new.ab_num and num <> new.num;
     end if;  
     return new;
end;
$$;


ALTER FUNCTION public.check_avto_trigger() OWNER TO root;

--
-- Name: object_err(); Type: FUNCTION; Schema: public; Owner: root
--

CREATE FUNCTION object_err() RETURNS trigger
    LANGUAGE plpgsql
    AS $$DECLARE
       is_err smallint ;
BEGIn
  IF ( NEW.err <> OLD.err) and ( NEW.err <> 0 ) THEN
	update sost_objects set blink = 1 where index = NEW.index ;
  END IF;
  is_err = 0;
  select count(*) into is_err from sost_objects where blink = 1 and id_obj = new.id_obj ;
  IF (is_err = 0) THEN
     select count(*) into is_err from sost_objects where err = 1 and id_obj = new.id_obj ;
     IF is_err = 0 THEN 
       is_err = 0; 
     ELSE 
       is_err = 1;
     END IF;
  ELSE 
      is_err = 2  ;
  END IF;
  update  all_object set err = is_err where new.id_obj = index ;
  return NEW;
END$$;


ALTER FUNCTION public.object_err() OWNER TO root;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ab_note; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE ab_note (
    num integer NOT NULL,
    fio text,
    dolz text,
    rm text,
    dt timestamp without time zone
);


ALTER TABLE public.ab_note OWNER TO root;

--
-- Name: ab_note_num_seq; Type: SEQUENCE; Schema: public; Owner: root
--

CREATE SEQUENCE ab_note_num_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ab_note_num_seq OWNER TO root;

--
-- Name: ab_note_num_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: root
--

ALTER SEQUENCE ab_note_num_seq OWNED BY ab_note.num;


--
-- Name: all_object; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE all_object (
    index smallint NOT NULL,
    sost_obj smallint DEFAULT (-1),
    name_obj character varying(20),
    err smallint DEFAULT 0
);


ALTER TABLE public.all_object OWNER TO root;

--
-- Name: TABLE all_object; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON TABLE all_object IS 'Список всех объектов главного кадра ВТО';


--
-- Name: devices; Type: TABLE; Schema: public; Owner: nick; Tablespace: 
--

CREATE TABLE devices (
    num integer NOT NULL,
    adr text,
    gr smallint,
    nazv text,
    kod_obj integer,
    dop text,
    sip text
);


ALTER TABLE public.devices OWNER TO nick;

--
-- Name: devices_num_seq; Type: SEQUENCE; Schema: public; Owner: nick
--

CREATE SEQUENCE devices_num_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.devices_num_seq OWNER TO nick;

--
-- Name: devices_num_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: nick
--

ALTER SEQUENCE devices_num_seq OWNED BY devices.num;


--
-- Name: faults; Type: TABLE; Schema: public; Owner: nick; Tablespace: 
--

CREATE TABLE faults (
    num integer NOT NULL,
    tip text,
    nazv text,
    recom text
);


ALTER TABLE public.faults OWNER TO nick;

--
-- Name: is_blink; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE is_blink (
    count bigint
);


ALTER TABLE public.is_blink OWNER TO root;

--
-- Name: objects; Type: TABLE; Schema: public; Owner: nick; Tablespace: 
--

CREATE TABLE objects (
    num integer NOT NULL,
    gr smallint,
    nazv text
);


ALTER TABLE public.objects OWNER TO nick;

--
-- Name: proba; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE proba (
    num integer NOT NULL,
    name text
);


ALTER TABLE public.proba OWNER TO postgres;

--
-- Name: proba_num_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE proba_num_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.proba_num_seq OWNER TO postgres;

--
-- Name: proba_num_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE proba_num_seq OWNED BY proba.num;


--
-- Name: sost_objects; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE sost_objects (
    index smallint NOT NULL,
    id_obj smallint,
    name character varying(20),
    sost smallint DEFAULT (-1),
    err smallint,
    blink smallint DEFAULT 0
);


ALTER TABLE public.sost_objects OWNER TO root;

--
-- Name: TABLE sost_objects; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON TABLE sost_objects IS 'Состояние оборудования в объектах ';


--
-- Name: COLUMN sost_objects.err; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON COLUMN sost_objects.err IS '0 - нет ошибки 
1 - есть ошибка ';


--
-- Name: COLUMN sost_objects.blink; Type: COMMENT; Schema: public; Owner: root
--

COMMENT ON COLUMN sost_objects.blink IS 'флаг мигает ли кнопка или нет';


--
-- Name: stand_device; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE stand_device (
    index smallint NOT NULL,
    name character varying(20),
    err smallint DEFAULT 0,
    type smallint
);


ALTER TABLE public.stand_device OWNER TO root;

--
-- Name: tlf_note; Type: TABLE; Schema: public; Owner: root; Tablespace: 
--

CREATE TABLE tlf_note (
    num integer NOT NULL,
    zag text,
    tats text,
    nomer text,
    dop text,
    avto character(1),
    rm text,
    dt timestamp without time zone,
    ab_num integer,
    CONSTRAINT tlf_note_avto_check CHECK (((avto = ''::bpchar) OR (avto = '*'::bpchar)))
);


ALTER TABLE public.tlf_note OWNER TO root;

--
-- Name: tlf_note_num_seq; Type: SEQUENCE; Schema: public; Owner: root
--

CREATE SEQUENCE tlf_note_num_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tlf_note_num_seq OWNER TO root;

--
-- Name: tlf_note_num_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: root
--

ALTER SEQUENCE tlf_note_num_seq OWNED BY tlf_note.num;


--
-- Name: num; Type: DEFAULT; Schema: public; Owner: root
--

ALTER TABLE ONLY ab_note ALTER COLUMN num SET DEFAULT nextval('ab_note_num_seq'::regclass);


--
-- Name: num; Type: DEFAULT; Schema: public; Owner: nick
--

ALTER TABLE ONLY devices ALTER COLUMN num SET DEFAULT nextval('devices_num_seq'::regclass);


--
-- Name: num; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY proba ALTER COLUMN num SET DEFAULT nextval('proba_num_seq'::regclass);


--
-- Name: num; Type: DEFAULT; Schema: public; Owner: root
--

ALTER TABLE ONLY tlf_note ALTER COLUMN num SET DEFAULT nextval('tlf_note_num_seq'::regclass);


--
-- Data for Name: ab_note; Type: TABLE DATA; Schema: public; Owner: root
--

COPY ab_note (num, fio, dolz, rm, dt) FROM stdin;
1	Смирнов С С	старший инженер	РМО1	2015-06-24 17:39:24
3	Яшин Н Н 	менеджер	РМО1	2015-06-25 16:24:30.827684
4	Мякишев	аналитик	РМО1	2015-06-25 16:24:30.867723
10	Лекарев Л Г	монтажник	РМО1	2015-06-29 10:58:25.029698
11	Демин О Л 	повар	РМО1	2015-06-29 11:33:59.526426
15	Ярофеев П И	инженер	РМО1	2015-07-10 14:51:15.31236
17	Иванов К А	преподаватель	РМО1	2015-07-13 16:04:30
25	Давидов Д С	инженер-конструктор	РМО1	2015-07-15 15:14:02
2	Веронин И Т	начальник отдела	РМО1	2015-08-31 18:08:53
6	Романов Р П	инспектор	РМО1	2015-09-01 15:53:05
12	Смолин И П	доктор	РМО1	2015-09-01 16:03:04
\.


--
-- Name: ab_note_num_seq; Type: SEQUENCE SET; Schema: public; Owner: root
--

SELECT pg_catalog.setval('ab_note_num_seq', 26, true);


--
-- Data for Name: all_object; Type: TABLE DATA; Schema: public; Owner: root
--

COPY all_object (index, sost_obj, name_obj, err) FROM stdin;
1	0	2	1
0	1	1	2
3	0	4	0
6	0	7	0
7	0	8	0
4	0	5	0
5	0	6	0
8	0	9	0
10	0	11	0
11	0	12	0
12	0	13	0
13	0	14	0
14	0	15	0
15	0	16	0
16	0	17	0
17	0	18	0
18	0	19	0
19	0	20	0
20	0	21	0
9	1	10	0
2	0	3	0
\.


--
-- Data for Name: devices; Type: TABLE DATA; Schema: public; Owner: nick
--

COPY devices (num, adr, gr, nazv, kod_obj, dop, sip) FROM stdin;
\.


--
-- Name: devices_num_seq; Type: SEQUENCE SET; Schema: public; Owner: nick
--

SELECT pg_catalog.setval('devices_num_seq', 1, false);


--
-- Data for Name: faults; Type: TABLE DATA; Schema: public; Owner: nick
--

COPY faults (num, tip, nazv, recom) FROM stdin;
\.


--
-- Data for Name: is_blink; Type: TABLE DATA; Schema: public; Owner: root
--

COPY is_blink (count) FROM stdin;
1
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: public; Owner: nick
--

COPY objects (num, gr, nazv) FROM stdin;
100	1	Кремль
201	2	
202	2	
203	2	
204	2	
205	2	
206	2	
207	2	
208	2	
209	2	
210	2	
211	2	
212	2	
213	2	
214	2	
215	2	
216	2	
217	2	
218	2	
219	2	
220	2	
221	2	
301	3	
\.


--
-- Data for Name: proba; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY proba (num, name) FROM stdin;
1	ss
2	rr
3	kk
\.


--
-- Name: proba_num_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('proba_num_seq', 3, true);


--
-- Data for Name: sost_objects; Type: TABLE DATA; Schema: public; Owner: root
--

COPY sost_objects (index, id_obj, name, sost, err, blink) FROM stdin;
6	0	СК1	0	0	0
8	0	КЛС1	0	0	0
10	0	ПУР4	0	0	0
12	0	БС-ПУР2	0	0	0
30	2	ПУС	0	0	0
26	2	ПУР1	0	0	0
27	2	ПУР2	0	0	0
28	2	ПУР3	0	0	0
29	2	ПУС	0	0	0
31	2	БС-ПУР1	0	0	0
32	2	СК1	0	0	0
33	2	СК2	0	0	0
34	2	КЛС1	0	0	0
35	2	КЛС2	0	0	0
36	2	ПУР4	0	0	0
37	2	ПУР5	0	0	0
38	2	БС-ПУР2	0	0	0
43	3	ПУС	0	0	0
39	3	ПУР1	0	0	0
40	3	ПУР2	0	0	0
41	3	ПУР3	0	0	0
42	3	ПУС	0	0	0
44	3	БС-ПУР1	0	0	0
45	3	СК1	0	0	0
46	3	СК2	0	0	0
47	3	КЛС1	0	0	0
48	3	КЛС2	0	0	0
49	3	ПУР4	0	0	0
50	3	ПУР5	0	0	0
51	3	БС-ПУР2	0	0	0
15	1	ПУР3	0	0	0
16	1	ПУС	0	0	0
18	1	БС-ПУР1	0	0	0
19	1	СК1	0	0	0
20	1	СК2	0	0	0
21	1	КЛС1	0	0	0
22	1	КЛС2	0	0	0
23	1	ПУР4	0	0	0
24	1	ПУР5	0	0	0
25	1	БС-ПУР2	0	0	0
13	1	ПУР1	0	0	0
5	0	БС-ПУР1	0	0	0
2	0	ПУР3	0	1	0
1	0	ПУР2	0	0	0
0	0	ПУР1	0	1	0
17	1	ПУС	1	1	0
4	0	ПУС	0	0	0
7	0	СК2	0	1	0
9	0	КЛС2	0	1	1
3	0	ПУС	0	0	0
11	0	ПУР5	0	0	0
14	1	ПУР2	0	0	0
\.


--
-- Data for Name: stand_device; Type: TABLE DATA; Schema: public; Owner: root
--

COPY stand_device (index, name, err, type) FROM stdin;
15	Серв.1(О)	0	1
16	Серв.2(О)	0	1
4	Серв.2(З)	0	1
3	Серв.1(З)	0	1
8	Инв.(З)	0	1
19	Инв.(О)	0	1
7	Консоль	0	1
6	РУЭ 2(З)	0	1
5	РУЭ 1(З)	0	1
2	КЛС 2(З)	0	1
10	СПН 2	0	1
11	РУЭ 1(О)	0	1
12	РУЭ 2(О)	0	1
13	КЛС 1(О)	0	1
14	КЛС 2(О)	0	1
17	ИБП 1	0	1
18	ИБП 2	0	1
9	СПН 1	0	1
0	В П	0	1
1	КЛС 1(З)	0	1
20	220 В	0	2
21	60 В	0	2
\.


--
-- Data for Name: tlf_note; Type: TABLE DATA; Schema: public; Owner: root
--

COPY tlf_note (num, zag, tats, nomer, dop, avto, rm, dt, ab_num) FROM stdin;
37	дом	ГАТС	495316-54-35		*	РМО1	2015-07-15 15:14:43.787124	25
3	приемная	АТС2	27564	секретарь Алена	 	РМО1	2015-08-27 14:30:18.328928	1
21	дом	ГАТС	495672-88-67		 	РМО1	2015-08-27 14:30:18.328928	1
2	кабинет	АТС1	8798		*	РМО1	2015-08-27 14:30:18.328928	1
30	домашний	ГАТС	4957636547	с 20 до 23	 	РМО1	2015-08-31 12:42:09.226461	2
14	комната 11	АТС1	456		 	РМО1	2015-08-31 18:09:08.573658	2
31	123	345	678	890	 	РМО1	2015-08-31 18:09:29.077475	2
43	123	56	78		 	РМО1	2015-09-01 15:57:26.099549	17
44	345	89	90		 	РМО1	2015-09-01 15:57:33.327684	17
9	дом	ГАТС	(495)477-98-08	\N	\N	РМО1	2015-07-15 14:50:01.299738	4
6	комната 6  16 объект	АТС9	9865	\N	 	РМО1	2015-07-15 14:50:01.299738	3
4	комната 420	АТС1	2345	раб с 8 до 20	 	РМО1	2015-07-15 14:50:01.299738	3
5	комната 67	АТС2	21345	\N	*	РМО1	2015-07-15 14:50:01.299738	3
10	дом	ГАТС	(495)656-09-68	\N	*	\N	2015-07-15 14:50:01.299738	6
11	дом	ГАТС	(495)621-87-45	\N	\N	РМО1	2015-07-15 14:50:01.299738	10
12	ресторан цех	ГАТС	(495)876-97-56		*	РМО1	2015-07-15 14:50:01.299738	\N
13	цех 6	АТС9	6789		 	РМО1	2015-07-15 14:50:01.299738	11
22	123	АТС2	12345	78	*	РМО1	2015-07-15 14:50:01.299738	11
23	ytre	ГАТС	4568920	67	 	РМО1	2015-07-15 14:50:01.299738	11
32	комната 34	АТС9	7865		 	РМО1	2015-07-15 14:50:01.299738	12
26	765	ГАТС	5674321289	по средам	 	РМО1	2015-09-01 16:02:44.012714	15
24	офис 12	АТС2	9845	123	*	РМО1	2015-09-01 16:02:44.012714	15
25	34123	АТС9	8765	с 10 до 19	 	РМО1	2015-09-01 16:03:24.529446	15
\.


--
-- Name: tlf_note_num_seq; Type: SEQUENCE SET; Schema: public; Owner: root
--

SELECT pg_catalog.setval('tlf_note_num_seq', 45, true);


--
-- Name: Unique_index; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY all_object
    ADD CONSTRAINT "Unique_index" UNIQUE (index);


--
-- Name: ab_note_pkey; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY ab_note
    ADD CONSTRAINT ab_note_pkey PRIMARY KEY (num);


--
-- Name: devices_pkey; Type: CONSTRAINT; Schema: public; Owner: nick; Tablespace: 
--

ALTER TABLE ONLY devices
    ADD CONSTRAINT devices_pkey PRIMARY KEY (num);


--
-- Name: faults_pkey; Type: CONSTRAINT; Schema: public; Owner: nick; Tablespace: 
--

ALTER TABLE ONLY faults
    ADD CONSTRAINT faults_pkey PRIMARY KEY (num);


--
-- Name: index; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY sost_objects
    ADD CONSTRAINT index PRIMARY KEY (index);


--
-- Name: objects_pkey; Type: CONSTRAINT; Schema: public; Owner: nick; Tablespace: 
--

ALTER TABLE ONLY objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (num);


--
-- Name: pimary_index; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY stand_device
    ADD CONSTRAINT pimary_index PRIMARY KEY (index);


--
-- Name: primary_key; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY all_object
    ADD CONSTRAINT primary_key PRIMARY KEY (index);


--
-- Name: tlf_note_pkey; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY tlf_note
    ADD CONSTRAINT tlf_note_pkey PRIMARY KEY (num);


--
-- Name: unique_index; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY stand_device
    ADD CONSTRAINT unique_index UNIQUE (index);


--
-- Name: unuque_index; Type: CONSTRAINT; Schema: public; Owner: root; Tablespace: 
--

ALTER TABLE ONLY sost_objects
    ADD CONSTRAINT unuque_index UNIQUE (index);


--
-- Name: t_errblink; Type: TRIGGER; Schema: public; Owner: root
--

CREATE TRIGGER t_errblink AFTER UPDATE ON sost_objects FOR EACH ROW WHEN (((new.err <> old.err) OR (new.blink <> old.blink))) EXECUTE PROCEDURE object_err();


--
-- Name: tlf_note_trigger; Type: TRIGGER; Schema: public; Owner: root
--

CREATE TRIGGER tlf_note_trigger BEFORE INSERT OR UPDATE ON tlf_note FOR EACH ROW EXECUTE PROCEDURE check_avto_trigger();


--
-- Name: devices_kod_obj_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nick
--

ALTER TABLE ONLY devices
    ADD CONSTRAINT devices_kod_obj_fkey FOREIGN KEY (kod_obj) REFERENCES objects(num) ON DELETE CASCADE;


--
-- Name: tlf_note_ab_num_fkey; Type: FK CONSTRAINT; Schema: public; Owner: root
--

ALTER TABLE ONLY tlf_note
    ADD CONSTRAINT tlf_note_ab_num_fkey FOREIGN KEY (ab_num) REFERENCES ab_note(num) ON DELETE CASCADE;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

